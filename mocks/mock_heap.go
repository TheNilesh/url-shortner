// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	metrics "github.com/thenilesh/url-shortner/metrics"
)

// Heap is an autogenerated mock type for the Heap type
type Heap struct {
	mock.Mock
}

// GetMaxValuePairs provides a mock function with given fields: n
func (_m *Heap) GetMaxValuePairs(n int) []metrics.KeyValuePair {
	ret := _m.Called(n)

	var r0 []metrics.KeyValuePair
	if rf, ok := ret.Get(0).(func(int) []metrics.KeyValuePair); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]metrics.KeyValuePair)
		}
	}

	return r0
}

// IncOrPush provides a mock function with given fields: key
func (_m *Heap) IncOrPush(key string) {
	_m.Called(key)
}

// Len provides a mock function with given fields:
func (_m *Heap) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Less provides a mock function with given fields: i, j
func (_m *Heap) Less(i int, j int) bool {
	ret := _m.Called(i, j)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(i, j)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Pop provides a mock function with given fields:
func (_m *Heap) Pop() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Push provides a mock function with given fields: x
func (_m *Heap) Push(x interface{}) {
	_m.Called(x)
}

// Swap provides a mock function with given fields: i, j
func (_m *Heap) Swap(i int, j int) {
	_m.Called(i, j)
}

// NewHeap creates a new instance of Heap. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHeap(t interface {
	mock.TestingT
	Cleanup(func())
}) *Heap {
	mock := &Heap{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
